name: Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y smbclient
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Check formatting
      run: cargo fmt -- --check

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: comfy-fs-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: comfy-fs-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: comfy-fs-linux-arm64
          
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: comfy-fs-windows-x86_64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: comfy-fs-windows-arm64.exe
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: comfy-fs-macos-intel
          - target: aarch64-apple-darwin
            os: macos-latest
            name: comfy-fs-macos-arm64

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y smbclient
        
        # Install cross-compilation tools for ARM
        if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
        
        # Install musl tools
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install samba

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin comfy-fs
      env:
        RUSTFLAGS: -C target-cpu=generic

    - name: Prepare binary
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/comfy-fs.exe dist/${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/comfy-fs dist/${{ matrix.name }}
        fi

    - name: Create archive
      shell: bash
      run: |
        cd dist
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          7z a "../${{ matrix.name }}.zip" "${{ matrix.name }}"
        else
          tar -czf "../${{ matrix.name }}.tar.gz" "${{ matrix.name }}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}.tar.gz
          ${{ matrix.name }}.zip
        if-no-files-found: ignore

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        cd release
        sha256sum * > checksums.sha256

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}